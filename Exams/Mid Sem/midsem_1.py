# -*- coding: utf-8 -*-
"""midsem_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P8DT0mMmA6MDNViOorXvrC8umBLr3Uvm
"""

# Commented out IPython magic to ensure Python compatibility.
from mpl_toolkits.mplot3d import Axes3D
import numpy as np 
import matplotlib.pyplot as plt 
xrange=np.linspace(-10,10,1001)
yrange=np.linspace(-10,10,1001)
x1,y1=np.meshgrid(xrange,yrange)
z1=x1**2+y1**2+2*x1+2*y1
# %matplotlib inline
fig=plt.figure(figsize=(10,10))
ax=fig.add_subplot(111,projection='3d')
ax.plot_surface(x1,y1,z1)
plt.show()
y1[np.where(z1== np.amin(z1))]

cur_x1=3
cur_x2=3
rate=0.01
precision=0.000001
previous_step_size=1
max_iters=10000
iters=0
df_x1=lambda x1,x2:2*x1+2
df_x2=lambda x1,x2:2*x2+2
while previous_step_size>precision and iters<max_iters:
  prev_x1=cur_x1
  prev_x2=cur_x2
  cur_x1=cur_x1-rate*df_x1(prev_x1,prev_x2)
  cur_x2=cur_x2-rate*df_x2(prev_x1,prev_x2)
  previous_step_size=abs(cur_x1-prev_x1)+abs(cur_x2-prev_x2)
  iters=iters+1
value=cur_x1**2+cur_x2**2+2*cur_x1+2*cur_x2
print("local minima occurs at",cur_x1,"and ",cur_x2,iters,"value is",value)

sin_x1=np.sin(x1)
sin_y1=np.sin(y1)
z1=x1*sin_x1+y1*sin_y1
fig=plt.figure(figsize=(10,10))
ax=fig.add_subplot(111,projection='3d')
ax.plot_surface(x1,y1,z1)
plt.show()
np.amin(z1)

import math
cur_x1=10
cur_x2=10
rate=0.01
precision=0.000001

max_iters=10000
df_x1=lambda x1,x2:x1*math.cos(x1)+math.sin(x1)
df_x2=lambda x1,x2:x2*math.cos(x2)+math.sin(x2)
p_x1=cur_x1
p_x2=cur_x2
while(p_x1>-10):
  cur_x1=p_x1
  cur_x2=p_x2
  iters=0
  previous_step_size=1 
  while previous_step_size>precision and iters<max_iters and cur_x1>=-10 and cur_x1<=10:
    prev_x1=cur_x1
    prev_x2=cur_x2
    cur_x1=cur_x1-rate*df_x1(prev_x1,prev_x2)
    cur_x2=cur_x2-rate*df_x2(prev_x1,prev_x2)
    previous_step_size=abs(cur_x1-prev_x1)+abs(cur_x2-prev_x2)
    iters=iters+1
  
  if(cur_x1>=-10 and cur_x1<=10):
    value=cur_x1*math.sin(cur_x1)+cur_x2*math.sin(cur_x2)
    print("local minima occurs at",cur_x1,"and ",cur_x2,"value is",value)
  else:
     value=prev_x1*math.sin(prev_x1)+prev_x2*math.sin(prev_x2)
     print("local minima occurs at",prev_x1,"and ",prev_x2,"value is",value)
  print("initial value of x1",p_x1,"and value of cur_x2 is",p_x2)
  p_x1=p_x1-1
  p_x2=p_x2-1