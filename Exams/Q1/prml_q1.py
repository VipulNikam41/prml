# -*- coding: utf-8 -*-
"""Prml_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rMyiDlB2VyqBPdbjkxYnPy4TJoYVe4p9
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d

# %matplotlib notebook

from google.colab import files
uploaded = files.upload()

data = np.genfromtxt('quiz1_dataset.csv', delimiter=',')
data.shape

X = data[:, :-1]
y = data[:, -1:]
X.shape, y.shape

class regression:
  # Constructor
    def __init__(self, name='reg'):
        self.name = name  # Create an instance variable
    
    def grad_update(self,w_old,lr,y,x):
        w = w_old - ((2*lr*(np.dot(x.T, (np.dot(x, w_old)-y)))/x.shape[0]))
        return w

    def error(self,w,y,x):
        return np.sum((y- np.dot(x, w))**2)/x.shape[0]

    def mat_inv(self,y,x_aug):
        return np.linalg.inv((x_aug.T).dot(x_aug)).dot(x_aug.T).dot(y)

    def Regression_grad_des(self,x,y,lr):
        w_pred = np.zeros((x.shape[1], 1))
        err = []
        for i in range(1000):
            w_pred = self.grad_update(w_pred, lr, y, x)
            err.append(self.error(w_pred, y, x))
        return w_pred,err
    
    def plot_single_feature(self, x, y):
        plt.figure()
        plt.scatter(x, y, s=10)
        plt.xlabel('X')
        plt.ylabel('y')
        plt.show()
        
    def plot_two_feature(self, x, y):
        fig = plt.figure()
        ax = fig.gca(projection='3d')
        ax.scatter(x[:, 0], x[:, 1], y)
        plt.xlabel('x1')
        plt.ylabel('x2')
        plt.show()
        
    def feature_scale(self, x):
        x_mean = x.mean(axis=0)
        x_stdev = x.std(axis=0)
        x_norm = (x - x_mean)/(x_stdev)
        return x_norm, x_mean, x_stdev
        
    def featurewise_regression(self, x, y, x_test, y_test, fold_featurewise_dict, fold_number, learning_rate= 0.01):
        for i in range(x.shape[1]):
            x_norm, x_mean, x_stdev = self.feature_scale(x[:, i])
            X_aug = np.c_[np.ones((x.shape[0], 1)), x_norm]
            fold_featurewise_dict['w_pred_mat_inv'][i+1][fold_number] = self.mat_inv(y, X_aug)
            fold_featurewise_dict['w_pred_grad_desc'][i+1][fold_number], error = self.Regression_grad_des(X_aug, y, learning_rate)
            fold_featurewise_dict['Training_error'][i+1][fold_number] = error[-1]
            
            x_test_norm = (x_test[:, i] - x_mean)/(x_stdev)
            x_test_aug = np.c_[np.ones((x_test.shape[0], 1)), x_test_norm]
            
            fold_featurewise_dict['Testing_error'][i+1][fold_number] = self.error(fold_featurewise_dict['w_pred_grad_desc'][i+1][fold_number], y_test, x_test_aug)
    
    def data_transform(self, X,degree):
        X_new = np.ones((X.shape[0], 1))
        for i in range(1, degree+1):
            X_new = np.c_[X_new, X**i]
        return X_new.T
    
    def feature_poly_regression(self, x, y, x_test, y_test, fold_featurewise_dict, fold_number, feature, learning_rate= 0.01):
        x_norm, x_mean, x_stdev = self.feature_scale(x)
        X_aug = np.c_[np.ones((x.shape[0], 1)), x_norm]
        fold_featurewise_dict['w_pred_mat_inv'][feature][fold_number] = self.mat_inv(y, X_aug).round(4)
        fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number], error = self.Regression_grad_des(X_aug, y, learning_rate)
        fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number] = fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number].round(4)
        fold_featurewise_dict['Training_error'][feature][fold_number] = error[-1]

        x_test_norm = (x_test - x_mean)/(x_stdev)
        x_test_aug = np.c_[np.ones((x_test.shape[0], 1)), x_test_norm]

        fold_featurewise_dict['Testing_error'][feature][fold_number] = self.error(fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number], y_test, x_test_aug)
    
    def bi_feature_poly_regression(self, x, y, x_test, y_test, fold_featurewise_dict, fold_number, feature, learning_rate= 0.01):
        x_norm, x_mean, x_stdev = self.feature_scale(x)
        X_aug = np.c_[np.ones((x.shape[0], 1)), x_norm]
        fold_featurewise_dict['w_pred_mat_inv'][feature][fold_number] = self.mat_inv(y, X_aug).round(4)
        fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number], error = self.Regression_grad_des(X_aug, y, learning_rate)
        fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number] = fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number].round(4)
        fold_featurewise_dict['Training_error'][feature][fold_number] = error[-1]

        x_test_norm = (x_test - x_mean)/(x_stdev)
        x_test_aug = np.c_[np.ones((x_test.shape[0], 1)), x_test_norm]

        fold_featurewise_dict['Testing_error'][feature][fold_number] = self.error(fold_featurewise_dict['w_pred_grad_desc'][feature][fold_number], y_test, x_test_aug)

reg = regression()
for i in range(X.shape[1]):
    reg.plot_single_feature(data[:, i], y)

test_size = y.shape[0]//5

fold_featurewise_dict = {}
fold_featurewise_dict['w_pred_mat_inv'] = {}
fold_featurewise_dict['w_pred_grad_desc'] = {}
fold_featurewise_dict['Training_error'] = {}
fold_featurewise_dict['Testing_error'] = {}

for key in fold_featurewise_dict.keys():
    for i in range(X.shape[1]):
        fold_featurewise_dict[key][i+1] = {}
        for j in range(5):
            fold_featurewise_dict[key][i+1][j+1] = {}
            
for i in fold_featurewise_dict: 
    print(i)

test_slice, remainder = np.split(X.copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)
reg.featurewise_regression(remainder, remainder_y, test_slice, test_slice_y, fold_featurewise_dict, 1, 0.01)


for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.featurewise_regression(remainder, remainder_y, test_slice, test_slice_y, fold_featurewise_dict, i+2, 0.01)

reg.featurewise_regression(X[:4*test_size], y[:4*test_size], X[4*test_size:], y[4*test_size:], fold_featurewise_dict, 5, 0.01)

import pandas as pd

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

w_pred_mat_inv[1].mean()

X_norm, X_mean, X_stdev = reg.feature_scale(X)
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm[:, 0]]
plt.figure()
plt.scatter(X_norm[:, 0], y, s=10)
plt.plot(X_norm[:, 0], np.dot(X_aug, (w_pred_mat_inv[1].mean())), 'y-')
plt.show()

X_norm, X_mean, X_stdev = reg.feature_scale(X)
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm[:, 1]]
plt.figure()
plt.scatter(X_norm[:, 1], y, s=10)
plt.plot(X_norm[:, 1], np.dot(X_aug, (w_pred_mat_inv[2].mean())), 'y-')
plt.show()

w_pred_grad_desc = pd.DataFrame(fold_featurewise_dict['w_pred_grad_desc'])
w_pred_grad_desc.head()

Training_error = pd.DataFrame(fold_featurewise_dict['Training_error'])
Training_error.head()

reg = regression()

fold_featurewise_dict = {}
fold_featurewise_dict['w_pred_mat_inv'] = {}
fold_featurewise_dict['w_pred_grad_desc'] = {}
fold_featurewise_dict['Training_error'] = {}
fold_featurewise_dict['Testing_error'] = {}

for key in fold_featurewise_dict.keys():
    for i in range(X.shape[1]):
        fold_featurewise_dict[key][i+1] = {}
        for j in range(5):
            fold_featurewise_dict[key][i+1][j+1] = {}
            
for i in fold_featurewise_dict: 
    print(i)

X_transform = (reg.data_transform(X[:, 0], 2)).T
X_transform.shape

test_slice, remainder = np.split(X_transform.copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, 1, 1, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, i+2, 1, 0.01)

reg.feature_poly_regression(X_transform[:4*test_size, 1:], y[:4*test_size], X_transform[4*test_size:, 1:], y[4*test_size:], fold_featurewise_dict, 5, 1, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

w_pred_mat_inv[1].mean()

X_norm, X_mean, X_stdev = reg.feature_scale(X_transform[:, 1:])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]
plt.figure()
plt.scatter(X_norm[:, 1], y, s=10)
plt.scatter(X_norm[:, 1], np.dot(X_aug, (w_pred_mat_inv[1].mean())), s=10)
plt.show()

X_transform = (reg.data_transform(X[:, 1], 2)).T
X_transform.shape

test_slice, remainder = np.split(X_transform.copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, 1, 2, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, i+2, 2, 0.01)

reg.feature_poly_regression(X_transform[:4*test_size, 1:], y[:4*test_size], X_transform[4*test_size:, 1:], y[4*test_size:], fold_featurewise_dict, 5, 2, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

w_pred_mat_inv[2].mean()

X_norm, X_mean, X_stdev = reg.feature_scale(X_transform[:, 1:])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]
plt.figure()
plt.scatter(X_norm[:, 1], y, s=10)
plt.scatter(X_norm[:, 1], np.dot(X_aug, (w_pred_mat_inv[2].mean())), s=10)
plt.show()

X_transform = (reg.data_transform(X[:, 2], 2)).T
X_transform.shape

test_slice, remainder = np.split(X_transform.copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, 1, 3, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.feature_poly_regression(remainder[:, 1:], remainder_y, test_slice[:, 1:], test_slice_y, fold_featurewise_dict, i+2, 3, 0.01)

reg.feature_poly_regression(X_transform[:4*test_size, 1:], y[:4*test_size], X_transform[4*test_size:, 1:], y[4*test_size:], fold_featurewise_dict, 5, 3, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

w_pred_mat_inv[3].mean()

X_norm, X_mean, X_stdev = reg.feature_scale(X_transform[:, 1:])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]
plt.figure()
plt.scatter(X_norm[:, 1], y, s=10)
plt.scatter(X_norm[:, 1], np.dot(X_aug, (w_pred_mat_inv[3].mean())), s=10)
plt.show()

reg = regression()
reg.plot_two_feature(data[:, 0:2], y)

reg.plot_two_feature(data[:, 1:3], y)

reg.plot_two_feature(np.c_[data[:, 0], data[:,2]], y)

fold_featurewise_dict = {}
fold_featurewise_dict['w_pred_mat_inv'] = {}
fold_featurewise_dict['w_pred_grad_desc'] = {}
fold_featurewise_dict['Training_error'] = {}
fold_featurewise_dict['Testing_error'] = {}

for key in fold_featurewise_dict.keys():
    for i in range(X.shape[1]):
        fold_featurewise_dict[key][i+1] = {}
        for j in range(5):
            fold_featurewise_dict[key][i+1][j+1] = {}
            
for i in fold_featurewise_dict: 
    print(i)

test_slice, remainder = np.split(X[:, 0:2].copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, 1, 1, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, i+2, 1, 0.01)

reg.bi_feature_poly_regression(X[:4*test_size, 0:2], y[:4*test_size], X[4*test_size:, 0:2], y[4*test_size:], fold_featurewise_dict, 5, 1, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

test_slice, remainder = np.split(X[:, 1:3].copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, 1, 2, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, i+2, 2, 0.01)

reg.bi_feature_poly_regression(X[:4*test_size, 0:2], y[:4*test_size], X[4*test_size:, 0:2], y[4*test_size:], fold_featurewise_dict, 5, 2, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

test_slice, remainder = np.split(np.c_[X[:, 0], X[:, 2]].copy(), [test_size], axis=0)
test_slice_y, remainder_y = np.split(y.copy(), [test_size], axis=0)

reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, 1, 3, 0.01)

for i in range(0, 3):
    remainder[i*test_size:(i+1)*test_size], test_slice = test_slice, remainder[i*test_size:(i+1)*test_size].copy()
    remainder_y[i*test_size:(i+1)*test_size], test_slice_y = test_slice_y, remainder_y[i*test_size:(i+1)*test_size].copy()
    reg.bi_feature_poly_regression(remainder[:, 0:2], remainder_y, test_slice[:, 0:2], test_slice_y, fold_featurewise_dict, i+2, 3, 0.01)

reg.bi_feature_poly_regression(X[:4*test_size, 0:2], y[:4*test_size], X[4*test_size:, 0:2], y[4*test_size:], fold_featurewise_dict, 5, 3, 0.01)

w_pred_mat_inv = pd.DataFrame(fold_featurewise_dict['w_pred_mat_inv'])
w_pred_mat_inv.head()

print(X.shape)
X_norm, X_mean, X_stdev = reg.feature_scale(X[:, 0:2])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]

m = 30
x_1 = np.linspace(-4,4,30)
y_1 = np.linspace(-2,4,30)

X_1,Y_1 = np.meshgrid(x_1,y_1)
Z= w_pred_mat_inv[1].mean()[1, 0]*X_1 + w_pred_mat_inv[1].mean()[2,0]*Y_1 + w_pred_mat_inv[1].mean()[0,0]

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.scatter(X_norm[:, 0], X_norm[:, 1], y)
surf = ax.plot_surface(X_1, Y_1, Z, cmap='viridis')
# ax.plot_surface(X_norm[:, 0], X_norm[:, 1],  np.dot(X_aug, (w_pred_mat_inv[1].mean())), color='y')
plt.xlabel('x1')
plt.ylabel('x2')
plt.show()

X_norm, X_mean, X_stdev = reg.feature_scale(X[:, 1:3])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]

m = 30
x_1 = np.linspace(-4,4,30)
y_1 = np.linspace(-2,4,30)

X_1,Y_1 = np.meshgrid(x_1,y_1)
Z= w_pred_mat_inv[2].mean()[1, 0]*X_1 + w_pred_mat_inv[2].mean()[2,0]*Y_1 + w_pred_mat_inv[2].mean()[0,0]

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.scatter(X_norm[:, 0], X_norm[:, 1], y)
surf = ax.plot_surface(X_1, Y_1, Z, cmap='viridis')
# ax.plot_surface(X_norm[:, 0], X_norm[:, 1],  np.dot(X_aug, (w_pred_mat_inv[1].mean())), color='y')
plt.xlabel('x1')
plt.ylabel('x2')
plt.show()

X_norm, X_mean, X_stdev = reg.feature_scale(np.c_[X[:, 0], X[:, 2]])
X_aug = np.c_[np.ones((X.shape[0], 1)), X_norm]

m = 30
x_1 = np.linspace(-4,4,30)
y_1 = np.linspace(-2,4,30)

X_1,Y_1 = np.meshgrid(x_1,y_1)
Z= w_pred_mat_inv[3].mean()[1, 0]*X_1 + w_pred_mat_inv[3].mean()[2,0]*Y_1 + w_pred_mat_inv[3].mean()[0,0]

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.scatter(X_norm[:, 0], X_norm[:, 1], y)
surf = ax.plot_surface(X_1, Y_1, Z, cmap='viridis')
# ax.plot_surface(X_norm[:, 0], X_norm[:, 1],  np.dot(X_aug, (w_pred_mat_inv[1].mean())), color='y')
plt.xlabel('x1')
plt.ylabel('x2')
plt.show()

X.shape, y.shape

